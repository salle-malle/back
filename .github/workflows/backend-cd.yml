name: backend-cd-prod

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build-and-push:
    if: |
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Seoul'
      COOL_SMS_API_KEY: ${{ secrets.COOL_SMS_API_KEY }}
      COOL_SMS_SECRET_KEY: ${{ secrets.COOL_SMS_SECRET_KEY }}
      COOL_SMS_FROM: ${{ secrets.COOL_SMS_FROM }}
      DB_DRIVER_CLASS_NAME: ${{ secrets.DB_DRIVER_CLASS_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER_NAME: ${{ secrets.DB_USER_NAME }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
      OPEN_AI_API_KEY: ${{ secrets.OPEN_AI_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Clean Build With Gradle Wrapper
        run: chmod +x ./gradlew && ./gradlew build -x test

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Back Up Image For Rollback
        run: |
          if docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pda-midterm:latest; then
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/pda-midterm:latest \
              ${{ secrets.DOCKERHUB_USERNAME }}/pda-midterm:previous
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/pda-midterm:previous
          fi

      - name: Docker Image Build And Push
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/pda-midterm
          IMAGE_TAG=${{ github.sha }}-prod
          docker build \
            -t $IMAGE_NAME:$IMAGE_TAG \
            -f Dockerfile .
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            chmod +x /home/ubuntu/deploy.sh
            /home/ubuntu/deploy.sh ${{ github.sha }}-prod
